name: CI/CD Build & Deploy Flutter Web to Firebase Hosting

on: 
  push:
    branches: 
      - main 

jobs: 
  Deployment:
    runs-on: ubuntu-latest

    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5' 

      - name: Delete main.dart
        run: rm -f lib/main.dart

      - name: Create new main.dart
        run: |
          cat << 'EOF' > lib/main.dart
          import 'package:flutter/material.dart';
          import 'package:flutter_web_plugins/flutter_web_plugins.dart';
          import 'package:firebase_core/firebase_core.dart';
          import 'package:intl/date_symbol_data_local.dart';
          import 'package:flutter_localizations/flutter_localizations.dart';
          import 'package:provider/provider.dart';
          import 'package:traderview/api/auth_service.dart';
          import 'package:traderview/firebase_options.dart';
          import 'package:traderview/providers/user_model.dart';
          import 'package:traderview/routes/router.dart';

          Future<void> main() async {
            WidgetsFlutterBinding.ensureInitialized();
            await Firebase.initializeApp(
              options: DefaultFirebaseOptions.currentPlatform,
            );
            await initializeDateFormatting('es', null);
            usePathUrlStrategy();
            runApp(const MyAppWrapper());
          }

          class MyAppWrapper extends StatelessWidget {
            const MyAppWrapper({super.key});

            @override
            Widget build(BuildContext context) {
              return MultiProvider(
                providers: [
                  ChangeNotifierProvider(
                    create: (_) {
                      final model = UserModel();
                      model.fetchUserData();
                      return model;
                    },
                  ),
                  Provider<AuthService>(create: (_) => AuthService()),
                ],
                child: const MyApp(),
              );
            }
          }

          class MyApp extends StatelessWidget {
            const MyApp({super.key});

            @override
            Widget build(BuildContext context) {
              return MaterialApp.router(
                debugShowCheckedModeBanner: false,
                supportedLocales: const [Locale('es', 'ES')],
                locale: const Locale('es', 'ES'),
                localizationsDelegates: const [
                  GlobalMaterialLocalizations.delegate,
                  GlobalWidgetsLocalizations.delegate,
                  GlobalCupertinoLocalizations.delegate,
                ],
                title: 'Traderview',
                routerConfig: router,
                theme: ThemeData(
                  fontFamily: 'Montserrat',
                  colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
                  useMaterial3: true,
                ),
              );
            }
          }
          EOF

      - name: Delete firebase_options.dart
        run: rm -f lib/firebase_options.dart

      - name: Create new main.dart
        run: |
          mkdir -p lib
          cat <<EOF > lib/firebase_options.dart
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart'
              show defaultTargetPlatform, kIsWeb, TargetPlatform;

          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                return web;
              }
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for android - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.iOS:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for ios - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.macOS:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for macos - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.windows:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for windows - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.linux:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for linux - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                default:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions are not supported for this platform.',
                  );
              }
            }

            static final FirebaseOptions web = FirebaseOptions(
              apiKey: '${{ secrets.FIREBASE_API_KEY }}',
              authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
              projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
              storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
              messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
              appId: '${{ secrets.FIREBASE_APP_ID }}',
              measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}',
            );
          }
          EOF

      - name: Delete pubspec.yaml
        run: rm -f pubspec.yaml

      - name: Create new pubspec.yaml
        run: |
          cat << 'EOF' > pubspec.yaml
          name: traderview
          description: "A new Flutter project."
          publish_to: 'none'
          version: 1.0.0+1

          environment:
            sdk: ^3.5.4

          dependencies:
            flutter:
              sdk: flutter

            flutter_web_plugins:
              sdk: flutter

            cupertino_icons: ^1.0.8
            url_launcher: ^6.0.20
            go_router: ^15.1.1
            firebase_core: ^3.10.1
            cloud_firestore: ^5.6.0
            font_awesome_flutter: 10.8.0
            provider: ^6.1.5
            firebase_auth: ^5.4.2
            intl: ^0.19.0

            flutter_localizations:
              sdk: flutter
            fl_chart: ^0.63.0

          dev_dependencies:
            flutter_test:
              sdk: flutter

            flutter_lints: ^5.0.0

          flutter:
            uses-material-design: true

            assets:
              - assets/
              - assets/images/
          EOF
    
      - name: Install dependencies
        run: flutter pub get

      - name: Run Flutter commands
        run: flutter analyze

      - name: Build Flutter Web
        run: flutter build web --release

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: live